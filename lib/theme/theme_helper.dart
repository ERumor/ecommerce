import 'package:flutter/material.dart';
import '../../core/app_export.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();

// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray50Ab,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.black90001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: const BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.black900,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 16.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90001,
          fontSize: 12.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 42.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w900,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 28.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w900,
        ),
        labelLarge: TextStyle(
          color: appTheme.gray600,
          fontSize: 12.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 10.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.black90001,
          fontSize: 21.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w900,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90001,
          fontSize: 16.fSize,
          fontFamily: 'Avenir',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFCED55B),
    primaryContainer: Color(0X0C1B3D2F),
    secondaryContainer: Color(0XFF0A0A02),

    // Error colors
    errorContainer: Color(0XFF7C7D7D),
    onErrorContainer: Color(0XFF07120E),

    // On colors(text colors)
    onPrimary: Color(0XFF232323),
    onPrimaryContainer: Color(0XFF000101),
    onSecondaryContainer: Color(0XFF596363),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber300 => const Color(0XFFF2C94C);
  Color get amberA100 => const Color(0XFFFFE17D);

  // Black
  Color get black900 => const Color(0XFF0A0B02);
  Color get black90001 => const Color(0XFF040B14);
  Color get black90002 => const Color(0XFF000000);

  // BlueGray
  Color get blueGray100 => const Color(0XFFD6D6D4);
  Color get blueGray10001 => const Color(0XFFC8CEDA);
  Color get blueGray10002 => const Color(0XFFD1D1CC);
  Color get blueGray400 => const Color(0XFF888B92);
  Color get blueGray900 => const Color(0XFF292D32);
  Color get blueGray90026 => const Color(0X26333333);

  // DeepOrange
  Color get deepOrange300 => const Color(0XFFF7906D);
  Color get deepOrange50 => const Color(0XFFF7EBE7);

  // Gray
  Color get gray100 => const Color(0XFFF4F5F7);
  Color get gray10001 => const Color(0XFFF3F3F5);
  Color get gray10002 => const Color(0XFFF6F6F4);
  Color get gray10003 => const Color(0XFFF2F3F5);
  Color get gray200 => const Color(0XFFEFEFEC);
  Color get gray300 => const Color(0XFFDDDDDA);
  Color get gray400 => const Color(0XFFC1C2B8);
  Color get gray40000 => const Color(0X00CCC2C1);
  Color get gray40001 => const Color(0XFFB7AFAD);
  Color get gray40002 => const Color(0XFFC8BDBD);
  Color get gray40003 => const Color(0XFFBAB2B1);
  Color get gray50 => const Color(0XFFF5FAF8);
  Color get gray500 => const Color(0XFFA6A798);
  Color get gray50001 => const Color(0XFFB1ABA9);
  Color get gray50002 => const Color(0XFFADAAA7);
  Color get gray600 => const Color(0XFF898A7A);
  Color get gray900 => const Color(0XFF1F1F1F);
  Color get gray90001 => const Color(0XFF262626);
  Color get gray90051 => const Color(0X511B222A);

  // GrayAb
  Color get gray50Ab => const Color(0XABFCFCFC);

  // Green
  Color get green50 => const Color(0XFFEBECDE);
  Color get green500 => const Color(0XFF4BB347);

  // LightGreen
  Color get lightGreen500 => const Color(0XFF8ADD4B);

  // Red
  Color get red700 => const Color(0XFFBA5C3D);

  // White
  Color get whiteA700 => const Color(0XFFFEFEFD);
  Color get whiteA70001 => const Color(0XFFFFFFFF);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
